{"version":3,"sources":["Components/MenuBar.js","Components/NumberBar.jsx","Components/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["MenuBar","props","className","htmlFor","type","name","id","min","max","step","value","arraySize","onChange","updateArraySize","sortSpeed","updateSpeed","onClick","generateList","selection","NumberBar","style","SortingVisualizer","run","useState","numbers","setList","setSize","setSpeed","selectionSort","prevArray","currentArray","i","length","j","temp","clearInterval","console","log","event","target","number","Math","floor","random","push","key","height","setInterval","bubble","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAsDeA,MApDf,SAAiBC,GAGb,OACI,yBAAKC,UAAU,QACX,6BACI,yBAAKA,UAAU,YACX,2BAAOC,QAAQ,aAAf,cACA,mCACA,2BACIC,KAAK,QACLC,KAAK,YACLC,GAAG,YACHC,IAAI,KACJC,IAAI,MACJC,KAAK,IACLC,MAAOT,EAAMU,UACbC,SAAUX,EAAMY,kBAEpB,2BAAIZ,EAAMU,YAEd,yBAAKT,UAAU,YACX,2BAAOC,QAAQ,aAAf,iBACA,mCACA,2BACIC,KAAK,QACLC,KAAK,YACLC,GAAG,YACHC,IAAI,OACJC,IAAI,OACJC,KAAK,OACLC,MAAOT,EAAMa,UACbF,SAAUX,EAAMc,cAEpB,2BAAId,EAAMa,UAAV,0BAGR,4BACIE,QAASf,EAAMgB,cADnB,iBAIA,4BACID,QAASf,EAAMiB,WADnB,kBAIA,iDCnCGC,MAVf,SAAmBlB,GACf,OACI,yBACIC,UAAU,cACVkB,MAAOnB,EAAMmB,SCqFVC,MAtFf,WAEI,IAAIC,EAFqB,EAIAC,mBAAS,IAJT,mBAIpBC,EAJoB,KAIXC,EAJW,OAMEF,mBAAS,MANX,mBAMpBZ,EANoB,KAMTe,EANS,OAOGH,mBAAS,MAPZ,mBAOpBT,EAPoB,KAOTa,EAPS,KA4BzB,SAASC,IACLH,GAAQ,SAAAI,GAIJ,IAFA,IAAIC,EAAY,YAAOD,GAEdE,EAAI,EAAGA,EAAID,EAAaE,OAAQD,IACrC,IAAK,IAAIE,EAAIF,EAAI,EAAGE,EAAIH,EAAaE,OAAQC,IACzC,GAAIH,EAAaG,GAAGhC,MAAMS,MAAQoB,EAAaC,GAAG9B,MAAMS,MAAO,CAC3D,IAAIwB,EAAOJ,EAAaC,GAGxB,OAFAD,EAAaC,GAAKD,EAAaG,GAC/BH,EAAaG,GAAKC,EACXJ,EAMnB,OAFAK,cAAcb,GACdc,QAAQC,IAAI,QACLP,KAiBf,OACI,yBAAK5B,UAAU,aACX,kBAAC,EAAD,CACIS,UAAWA,EACXE,gBAbZ,SAAsByB,GAClBZ,EAAQY,EAAMC,OAAO7B,QAabI,UAAWA,EACXC,YAXZ,SAAsBuB,GAClBX,EAASW,EAAMC,OAAO7B,QAWdO,aA5DZ,WACIO,EAAU,GAEV,IAAK,IAAIO,EAAI,EAAGA,EAAIpB,EAAWoB,IAAK,CAChC,IAAIS,GAmEYjC,EAnEY,EAmEPC,EAnEU,IAoE3BiC,KAAKC,MAAMD,KAAKE,UAAYnC,EAAMD,IAASA,GAnE/CiB,EAAQoB,KACJ,kBAAC,EAAD,CACIC,IAAKd,EACLrB,MAAO8B,EACPpB,MAAO,CAAE0B,OAAO,GAAD,OAAKN,EAAL,UA8D/B,IAAwBjC,EAAKC,EAzDzBiB,EAAQD,GACRW,cAAcb,IA8CNJ,UArBZ,WACII,EAAMyB,YAAYnB,EAAed,IAqBzBkC,QAAM,IAGV,yBAAK9C,UAAU,cACVsB,KCtEFyB,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.d54ff2af.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction MenuBar(props) {\r\n\r\n\r\n    return (\r\n        <nav className='menu'>\r\n            <div>\r\n                <div className='controls'>\r\n                    <label htmlFor='arraySize'>Array Size</label>\r\n                    <span> </span>\r\n                    <input \r\n                        type='range' \r\n                        name='arraySize' \r\n                        id='arraySize'\r\n                        min='10'\r\n                        max='100'\r\n                        step='1'\r\n                        value={props.arraySize}\r\n                        onChange={props.updateArraySize}\r\n                    />\r\n                    <p>{props.arraySize}</p>\r\n                </div>\r\n                <div className=\"controls\">\r\n                    <label htmlFor='sortSpeed'>Sorting Speed</label>\r\n                    <span> </span>\r\n                    <input \r\n                        type='range' \r\n                        name='sortSpeed' \r\n                        id='sortSpeed'\r\n                        min='0.01'\r\n                        max='1000'\r\n                        step='0.01'\r\n                        value={props.sortSpeed}\r\n                        onChange={props.updateSpeed}\r\n                    />\r\n                    <p>{props.sortSpeed} (Smaller is faster)</p>\r\n                </div>\r\n            </div>\r\n            <button \r\n                onClick={props.generateList}>\r\n                Generate List\r\n            </button>\r\n            <button\r\n                onClick={props.selection}>\r\n                Selection Sort\r\n            </button>\r\n            <button>\r\n                Bubble Sort\r\n            </button>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default MenuBar;","import React from 'react';\r\n\r\nfunction NumberBar(props) {\r\n    return (\r\n        <div\r\n            className='number-bars'\r\n            style={props.style}\r\n        >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NumberBar;","import React, { useState } from 'react';\r\nimport MenuBar from './MenuBar';\r\nimport NumberBar from './NumberBar';\r\n\r\n\r\nfunction SortingVisualizer() {\r\n\r\n    let run;\r\n\r\n    let [numbers, setList] = useState([]);\r\n\r\n    let [arraySize, setSize] = useState('50');\r\n    let [sortSpeed, setSpeed] = useState('10'); // in ms\r\n\r\n    function generateList() {\r\n        numbers = [];\r\n\r\n        for (let i = 0; i < arraySize; i++) {\r\n            let number = generateNumber(5, 750);\r\n            numbers.push(\r\n                <NumberBar\r\n                    key={i}\r\n                    value={number}\r\n                    style={{ height: `${number}px` }}\r\n                />\r\n            )\r\n        }\r\n\r\n        setList(numbers);\r\n        clearInterval(run);\r\n\r\n    }\r\n\r\n    function selectionSort() {\r\n        setList(prevArray => {\r\n\r\n            let currentArray = [...prevArray];\r\n\r\n            for (let i = 0; i < currentArray.length; i++) {\r\n                for (let j = i + 1; j < currentArray.length; j++) {\r\n                    if (currentArray[j].props.value < currentArray[i].props.value) {\r\n                        let temp = currentArray[i];\r\n                        currentArray[i] = currentArray[j];\r\n                        currentArray[j] = temp;\r\n                        return currentArray;\r\n                    }\r\n                }\r\n            }\r\n            clearInterval(run);\r\n            console.log('here');\r\n            return currentArray;\r\n        })\r\n    }\r\n\r\n    function selection() {\r\n        run = setInterval(selectionSort, sortSpeed);\r\n    }\r\n\r\n    function setArraySize(event) {\r\n        setSize(event.target.value);\r\n    }\r\n\r\n    function setSortSpeed(event) {\r\n        setSpeed(event.target.value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <MenuBar\r\n                arraySize={arraySize}\r\n                updateArraySize={setArraySize}\r\n                sortSpeed={sortSpeed}\r\n                updateSpeed={setSortSpeed}\r\n                generateList={generateList}\r\n                selection={selection}\r\n                bubble\r\n            />\r\n\r\n            <div className='visualizer'>\r\n                {numbers}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    function generateNumber(min, max) {\r\n        return (Math.floor(Math.random() * (max - min))) + min;\r\n    }\r\n\r\n}\r\n\r\nexport default SortingVisualizer;","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './Components/SortingVisualizer';\n\nfunction App() {\n  return (\n    <SortingVisualizer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}